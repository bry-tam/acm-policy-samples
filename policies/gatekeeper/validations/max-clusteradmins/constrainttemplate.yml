apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: maxclusteradmins
  annotations:
    metadata.gatekeeper.sh/title: "Prevent number of cluster admins from exceeding limit"
    metadata.gatekeeper.sh/version: 1.0.0
    metadata.gatekeeper.sh/requires-sync-data: |
      "[
        [
          {
            "groups": ["rbac.authorization.k8s.io"],
            "versions": ["v1"],
            "kinds": ["ClusterRoleBinding"]
          }
        ]
      ]"
    description: |
      validates the number of users and groups assigned the cluster-admin role does not exceed the specified count
spec:
  crd:
    spec:
      names:
        kind: MaxClusterAdmins
      validation:
        openAPIV3Schema:
          type: object
          properties:
            maxAdmins:
              type: number
              description: Maximum number of users and groups allowed to be bound to cluster-admin role
  targets:
    - target: admission.k8s.gatekeeper.sh
      libs:
        - |
          package lib.helpers

          count_kinds := {"User", "Group"}
          validate_subject(kind, roleRef) {
            kind == count_kinds[_]
            is_clusteradmin_ref(roleRef)
          }

          is_clusteradmin_ref(role) {
            role.kind == "ClusterRole"
            role.name == "cluster-admin"
          }

      rego: |
        package maxclusteradmins

        import data.lib.helpers.validate_subject
        import data.lib.helpers.is_clusteradmin_ref

        max_admins := input.parameters.maxAdmins
        violation[{"msg": msg}] {
          is_number(max_admins)
          max_admins < 1
          msg = sprintf("max_admins parameter must be greater than 0(zero) max-admins: %v", [max_admins] )
        }


        violation[{"msg": msg}] {
          # check if the requested role references 'cluster-admin' 
          is_clusteradmin_ref(input.review.object.roleRef)
        
          # Get the total number of current admins 
          current_subjects := {sub | validate_subject(data.inventory.cluster["v1"].ClusterRoleBinding[i].subjects[s].kind, data.inventory.cluster["v1"].ClusterRoleBinding[i].roleRef); sub := data.inventory.cluster["v1"].ClusterRoleBinding[i].subjects[s].name}

          new_subjects := {sub | validate_subject(input.review.object.subjects[s].kind, input.review.object.roleRef); sub := input.review.object.subjects[s].name}
          total_admins := count(current_subjects | new_subjects)
          total_admins > max_admins

          msg := sprintf("Total number of cluster-admins exceeded. max-admins allowed: %v - current total: %v", [max_admins, total_admins] )
        }
