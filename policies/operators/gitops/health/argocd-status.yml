---
object-templates-raw: |
  ## Get all the ArgoCD instances we are checking health for
  {{- range $argo := (lookup "argoproj.io/v1beta1" "ArgoCD" "" "").items }}
    ## list all of the lookups for Argo deployments
    {{- $selectors := list "app.kubernetes.io/name=argocd-applicationset-controller"
                          (printf "app.kubernetes.io/name=%s-dex-server" $argo.metadata.name)
                          (printf "app.kubernetes.io/name=%s-notifications-controller" $argo.metadata.name)
                          (printf "app.kubernetes.io/name=%s-redis" $argo.metadata.name)
                          (printf "app.kubernetes.io/name=%s-repo-server" $argo.metadata.name)
                          (printf "app.kubernetes.io/name=%s-server" $argo.metadata.name)
    }}

    ## ensure ArgoCD is reporting healthy
  - complianceType: musthave
    objectDefinition:
      apiVersion: argoproj.io/v1beta1
      kind: ArgoCD
      metadata:
        name: {{ $argo.metadata.name }}
        namespace: {{ $argo.metadata.namespace }}
      status:
        server: Running
        notificationsController: Running
        applicationController: Running
        applicationSetController: Running
        sso: Running
        repo: Running
        phase: Available
        redis: Running

    ## ensure all deployments are healthy in each argo instance
    {{- range $sel := $selectors }}
      {{- range $dep := (lookup "apps/v1" "Deployment" $argo.metadata.namespace "" $sel).items }}
  - complianceType: musthave
    objectDefinition:
      kind: Deployment
      apiVersion: apps/v1
      metadata:
        name: {{ $dep.metadata.name }}
        namespace: {{ $dep.metadata.namespace }}
      status:
        replicas: '{{ $dep.spec.replicas | default 1 | toInt }}'
        updatedReplicas: '{{ $dep.spec.replicas | default 1 | toInt }}'
        readyReplicas: '{{ $dep.spec.replicas | default 1 | toInt }}'
        availableReplicas: '{{ $dep.spec.replicas | default 1 | toInt }}'
        conditions:
          {{- range $c := $dep.status.conditions }}
            {{- $_ := set $c "status" "True" }}
          - {{ $c | toRawJson | toLiteral }}
          {{- end }}
      {{- end }}
    {{- end }}

    ## ensure the argo statefulset is healthy
    {{- $ssSel := (printf "app.kubernetes.io/name=%s-application-controller" $argo.metadata.name) }}
    {{- range $sset := (lookup "apps/v1" "StatefulSet" $argo.metadata.namespace "" $ssSel).items }}
  - complianceType: musthave
    objectDefinition:
      kind: StatefulSet
      apiVersion: apps/v1
      metadata:
        name: {{ $sset.metadata.name }}
        namespace: {{ $sset.metadata.namespace }}
      status:
        availableReplicas: {{ $sset.spec.replicas }}
        currentReplicas: {{ $sset.spec.replicas }}
        updatedReplicas: {{ $sset.spec.replicas }}
        replicas: {{ $sset.spec.replicas }}
        collisionCount: 0
        readyReplicas: {{ $sset.spec.replicas }}
    {{- end }}
  {{- end }}
